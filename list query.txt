//jumlah row term document matrix
SELECT * FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1
SELECT COUNT(*) FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1
SELECT d.ID_SOURCE, COUNT(*) FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT GROUP BY d.ID_SOURCE

//jumlah dokumen source tertentu bedasarkan term
SELECT term, COUNT(*) FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1 GROUP BY m.TERM

//total dokumen
SELECT SUM(count) FROM (SELECT term, COUNT(*) as count FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1 GROUP BY m.TERM) AS temp

//dokumen yang memiliki term tertentu
SELECT * FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1 and m.TERM = 'address'

//jumlah tf bedasarkan term
SELECT term, sum(tf) FROM term_document_matrix m, document d WHERE m.ID_DOCUMENT = d.ID_DOCUMENT AND d.ID_SOURCE = 1 GROUP BY m.TERM

//count document by domain
SELECT `DOMAIN`, COUNT(*) FROM `corpus` GROUP BY DOMAIN

//delete or clean data
DELETE FROM `term_document_matrix` WHERE term = 'br';
DELETE FROM `term_document_matrix` WHERE term = 'gt';

5.3
5.4
6.4
10.7
12.3
12.10

q: 87 -> 81
a: 2442 - > 2280

UPDATE `score_system` SET SCORE_TF_IDF= 0 WHERE SCORE_TF_IDF < 0;
UPDATE `score_system` SET SCORE_WIDF= 0 WHERE SCORE_WIDF < 0;
UPDATE `score_system` SET SCORE_MIDF= 0 WHERE SCORE_MIDF < 0;

//sample
SELECT * FROM `term_document_matrix` tdm, `document` d WHERE tdm.ID_DOCUMENT = d.ID_DOCUMENT AND ((d.ID_SOURCE = 1 AND d.ID_REF <= 1) or (d.ID_SOURCE = 2 AND d.ID_REF <= 1) or (d.ID_SOURCE = 4))

//rekap
SELECT `ID_SCENARIO`, `AVERAGE_TYPE`,
SUM(CASE WHEN `TERM_WEIGHTING` = 'tf_idf' THEN `PRECISION` END) AS TF_IDF_PRECISION,
SUM(CASE WHEN `TERM_WEIGHTING` = 'widf' THEN `PRECISION` END) AS WIDF_PRECISION,
SUM(CASE WHEN `TERM_WEIGHTING` = 'midf' THEN `PRECISION` END) AS MIDF_PRECISION,
SUM(CASE WHEN `TERM_WEIGHTING` = 'tf_idf' THEN `RECALL` END) AS TF_IDF_RECALL,
SUM(CASE WHEN `TERM_WEIGHTING` = 'widf' THEN `RECALL` END) AS WIDF_RECALL,
SUM(CASE WHEN `TERM_WEIGHTING` = 'midf' THEN `RECALL` END) AS MIDF_RECALL,
SUM(CASE WHEN `TERM_WEIGHTING` = 'tf_idf' THEN `ACCURACY` END) AS TF_IDF_ACCURACY,
SUM(CASE WHEN `TERM_WEIGHTING` = 'widf' THEN `ACCURACY` END) AS WIDF_ACCURACY,
SUM(CASE WHEN `TERM_WEIGHTING` = 'midf' THEN `ACCURACY` END) AS MIDF_ACCURACY,
SUM(CASE WHEN `TERM_WEIGHTING` = 'tf_idf' THEN `F_MEASURE` END) AS TF_IDF_F_MEASURE,
SUM(CASE WHEN `TERM_WEIGHTING` = 'widf' THEN `F_MEASURE` END) AS WIDF_F_MEASURE,
SUM(CASE WHEN `TERM_WEIGHTING` = 'midf' THEN `F_MEASURE` END) AS MIDF_F_MEASURE
FROM `performa` WHERE `ROUNDING_TYPE`= 2 AND `ID_SCENARIO`>100 
GROUP BY `ID_SCENARIO`, `AVERAGE_TYPE` ORDER BY `AVERAGE_TYPE`

//import
mysql -u root -p db_asas_demo < "C:\Users\Waffi Fatur Rahman\Dropbox\TA WAFFI\model\db_asas.sql"

SELECT (FLOOR((`ID_PERFORMA`-1)/6)*3 + ((`ID_PERFORMA`-1)%3+1)) As `ID_PERFORMA` ,`ID_SCENARIO`,`ROUNDING_TYPE`,`TERM_WEIGHTING`,`PRECISION`,`RECALL`,`F_MEASURE`,`ACCURACY` FROM `performa` WHERE `AVERAGE_TYPE` = 'macro'  
ORDER BY `performa`.`ID_SCENARIO` ASC